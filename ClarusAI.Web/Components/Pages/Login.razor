@page "/login"
@inject IJSRuntime JSRuntime
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations
@using ClarusAI.Core.Interfaces

<PageTitle>ClarusAI - Secure Login</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <div class="logo-section">
                <i class="bi bi-shield-check text-primary"></i>
                <h2>ClarusAI</h2>
                <p class="text-muted">Healthcare AI Platform</p>
            </div>
        </div>

        <div class="login-form">
            <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                <DataAnnotationsValidator />
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        <i class="bi bi-exclamation-triangle me-2"></i>@errorMessage
                    </div>
                }

                <div class="form-group mb-3">
                    <label for="username" class="form-label">Username or Email</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-person"></i></span>
                        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" 
                                  placeholder="Enter your username or email" />
                    </div>
                    <ValidationMessage For="@(() => loginModel.Username)" class="text-danger" />
                </div>

                <div class="form-group mb-3">
                    <label for="password" class="form-label">Password</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-lock"></i></span>
                        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" 
                                  placeholder="Enter your password" />
                    </div>
                    <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                </div>

                <div class="form-check mb-3">
                    <InputCheckbox id="remember" class="form-check-input" @bind-Value="loginModel.RememberMe" />
                    <label class="form-check-label" for="remember">
                        Keep me signed in
                    </label>
                </div>

                <button type="submit" class="btn btn-primary w-100 mb-3" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <text>Signing in</text>
                    }
                    else
                    {
                        <i class="bi bi-box-arrow-in-right me-2"></i>
                        <text>Sign In</text>
                    }
                </button>
            </EditForm>

            <div class="login-footer">
                <div class="text-center mb-3">
                    <a href="/forgot-password" class="text-decoration-none">Forgot your password?</a>
                </div>
                <hr>
                <div class="text-center">
                    <span class="text-muted">Don't have an account? </span>
                    <a href="/register" class="text-decoration-none">Sign up</a>
                </div>
            </div>
        </div>

        <div class="security-notice">
            <div class="alert alert-info">
                <i class="bi bi-shield-check me-2"></i>
                <strong>HIPAA Compliant:</strong> Your login is encrypted and secure.
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = "";
    private bool isLoading = false;

    public class LoginModel
    {
        [Required(ErrorMessage = "Username or email is required")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; }
    }

    private async Task HandleLogin()
    {
        errorMessage = "";
        isLoading = true;
        StateHasChanged();

        try
        {
            var token = await AuthService.AuthenticateAsync(loginModel.Username, loginModel.Password);
            
            if (!string.IsNullOrEmpty(token))
            {
                // Store token securely (in production, use httpOnly cookies)
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "clarusai_token", token);
                
                // Redirect to dashboard or home
                Navigation.NavigateTo("/ai-chat");
            }
            else
            {
                errorMessage = "Invalid username or password. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
            // Log the actual error for debugging
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Focus on username field
            await JSRuntime.InvokeVoidAsync("document.getElementById('username').focus");
        }
    }
}

<style>
    .login-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }

    .login-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        width: 100%;
        max-width: 400px;
        overflow: hidden;
    }

    .login-header {
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        color: white;
        padding: 2rem;
        text-align: center;
    }

    .logo-section i {
        font-size: 3rem;
        margin-bottom: 1rem;
        color: #ffc107;
    }

    .logo-section h2 {
        margin: 0;
        font-weight: 700;
    }

    .login-form {
        padding: 2rem;
    }

    .input-group-text {
        background-color: #f8f9fa;
        border-color: #dee2e6;
    }

    .form-control:focus {
        border-color: #2a5298;
        box-shadow: 0 0 0 0.2rem rgba(42, 82, 152, 0.25);
    }

    .btn-primary {
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        border: none;
        padding: 12px;
        font-weight: 500;
    }

    .btn-primary:hover {
        background: linear-gradient(135deg, #1a3464 0%, #245288 100%);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    .security-notice {
        padding: 1rem 2rem 2rem;
    }

    .alert-info {
        background-color: #e3f2fd;
        border-color: #bbdefb;
        color: #0d47a1;
        font-size: 0.875rem;
    }

    .login-footer {
        border-top: 1px solid #dee2e6;
        padding-top: 1rem;
    }

    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
    }
</style>