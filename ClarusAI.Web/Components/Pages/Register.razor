@page "/register"
@inject IJSRuntime JSRuntime
@inject IRepository<User> UserRepository
@inject IEncryptionService EncryptionService
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations
@using ClarusAI.Core.Interfaces
@using ClarusAI.Core.Entities
@using ClarusAI.Core.Constants

<PageTitle>ClarusAI - Create Account</PageTitle>

<div class="register-container">
    <div class="register-card">
        <div class="register-header">
            <div class="logo-section">
                <i class="bi bi-person-plus text-warning"></i>
                <h2>Join ClarusAI</h2>
                <p class="text-muted">Healthcare AI Platform</p>
            </div>
        </div>

        <div class="register-form">
            <EditForm Model="@registerModel" OnValidSubmit="@HandleRegister">
                <DataAnnotationsValidator />
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        <i class="bi bi-exclamation-triangle me-2"></i>@errorMessage
                    </div>
                }

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success" role="alert">
                        <i class="bi bi-check-circle me-2"></i>@successMessage
                    </div>
                }

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="firstName" class="form-label">First Name</label>
                        <InputText id="firstName" class="form-control" @bind-Value="registerModel.FirstName" 
                                  placeholder="Enter first name" />
                        <ValidationMessage For="@(() => registerModel.FirstName)" class="text-danger" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="lastName" class="form-label">Last Name</label>
                        <InputText id="lastName" class="form-control" @bind-Value="registerModel.LastName" 
                                  placeholder="Enter last name" />
                        <ValidationMessage For="@(() => registerModel.LastName)" class="text-danger" />
                    </div>
                </div>

                <div class="form-group mb-3">
                    <label for="username" class="form-label">Username</label>
                    <InputText id="username" class="form-control" @bind-Value="registerModel.Username" 
                              placeholder="Choose a unique username" />
                    <ValidationMessage For="@(() => registerModel.Username)" class="text-danger" />
                </div>

                <div class="form-group mb-3">
                    <label for="email" class="form-label">Email Address</label>
                    <InputText id="email" type="email" class="form-control" @bind-Value="registerModel.Email" 
                              placeholder="Enter your professional email" />
                    <ValidationMessage For="@(() => registerModel.Email)" class="text-danger" />
                </div>

                <div class="form-group mb-3">
                    <label for="role" class="form-label">Professional Role</label>
                    <InputSelect id="role" class="form-select" @bind-Value="registerModel.Role">
                        <option value="">Select your role</option>
                        <option value="@Roles.Clinician">Clinician</option>
                        <option value="@Roles.Radiologist">Radiologist</option>
                        <option value="@Roles.Technician">Medical Technician</option>
                        <option value="@Roles.Viewer">Healthcare Viewer</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => registerModel.Role)" class="text-danger" />
                </div>

                <div class="form-group mb-3">
                    <label for="institution" class="form-label">Institution</label>
                    <InputText id="institution" class="form-control" @bind-Value="registerModel.Institution" 
                              placeholder="Hospital, clinic, or healthcare facility" />
                    <ValidationMessage For="@(() => registerModel.Institution)" class="text-danger" />
                </div>

                <div class="form-group mb-3">
                    <label for="licenseNumber" class="form-label">License Number (Optional)</label>
                    <InputText id="licenseNumber" class="form-control" @bind-Value="registerModel.LicenseNumber" 
                              placeholder="Professional license number" />
                </div>

                <div class="form-group mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" 
                              placeholder="Create a strong password" />
                    <ValidationMessage For="@(() => registerModel.Password)" class="text-danger" />
                    <div class="form-text">
                        Password must be at least 8 characters with uppercase, lowercase, number, and special character.
                    </div>
                </div>

                <div class="form-group mb-3">
                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                    <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" 
                              placeholder="Confirm your password" />
                    <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-danger" />
                </div>

                <div class="form-check mb-3">
                    <InputCheckbox id="acceptTerms" class="form-check-input" @bind-Value="registerModel.AcceptTerms" />
                    <label class="form-check-label" for="acceptTerms">
                        I agree to the <a href="/terms" target="_blank">Terms of Service</a> and <a href="/privacy" target="_blank">Privacy Policy</a>
                    </label>
                    <ValidationMessage For="@(() => registerModel.AcceptTerms)" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary w-100 mb-3" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <text>Creating Account</text>
                    }
                    else
                    {
                        <i class="bi bi-person-plus me-2"></i>
                        <text>Create Account</text>
                    }
                </button>
            </EditForm>

            <div class="register-footer">
                <hr>
                <div class="text-center">
                    <span class="text-muted">Already have an account? </span>
                    <a href="/login" class="text-decoration-none">Sign in</a>
                </div>
            </div>
        </div>

        <div class="security-notice">
            <div class="alert alert-info">
                <i class="bi bi-shield-check me-2"></i>
                <strong>HIPAA Compliant:</strong> Your data is encrypted and secure.
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private string errorMessage = "";
    private string successMessage = "";
    private bool isLoading = false;

    public class RegisterModel : IValidatableObject
    {
        [Required(ErrorMessage = "First name is required")]
        public string FirstName { get; set; } = "";

        [Required(ErrorMessage = "Last name is required")]
        public string LastName { get; set; } = "";

        [Required(ErrorMessage = "Username is required")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Username must be 3-50 characters")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Role is required")]
        public string Role { get; set; } = "";

        [Required(ErrorMessage = "Institution is required")]
        public string Institution { get; set; } = "";

        public string LicenseNumber { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "Password must be at least 8 characters")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password")]
        public string ConfirmPassword { get; set; } = "";

        [Range(typeof(bool), "true", "true", ErrorMessage = "You must accept the terms and conditions")]
        public bool AcceptTerms { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (Password != ConfirmPassword)
            {
                yield return new ValidationResult("Passwords do not match", new[] { nameof(ConfirmPassword) });
            }

            // Password complexity validation
            if (!string.IsNullOrEmpty(Password))
            {
                if (!Password.Any(char.IsUpper))
                    yield return new ValidationResult("Password must contain at least one uppercase letter", new[] { nameof(Password) });
                
                if (!Password.Any(char.IsLower))
                    yield return new ValidationResult("Password must contain at least one lowercase letter", new[] { nameof(Password) });
                
                if (!Password.Any(char.IsDigit))
                    yield return new ValidationResult("Password must contain at least one number", new[] { nameof(Password) });
                
                if (!Password.Any(c => "!@#$%^&*()_+-=[]{}|;:,.<>?".Contains(c)))
                    yield return new ValidationResult("Password must contain at least one special character", new[] { nameof(Password) });
            }
        }
    }

    private async Task HandleRegister()
    {
        errorMessage = "";
        successMessage = "";
        isLoading = true;
        StateHasChanged();

        try
        {
            // Check if username or email already exists
            var existingUser = await UserRepository.FindAsync(u => 
                u.Username == registerModel.Username || u.Email == registerModel.Email);
            
            if (existingUser.Any())
            {
                errorMessage = "Username or email already exists. Please choose different credentials.";
                return;
            }

            // Create new user
            var user = new User
            {
                Id = Guid.NewGuid(),
                Username = registerModel.Username,
                Email = registerModel.Email,
                FirstName = registerModel.FirstName,
                LastName = registerModel.LastName,
                Role = registerModel.Role,
                Institution = registerModel.Institution,
                LicenseNumber = registerModel.LicenseNumber,
                PasswordHash = EncryptionService.HashPassword(registerModel.Password),
                IsActive = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };

            await UserRepository.AddAsync(user);
            await UserRepository.SaveChangesAsync();

            successMessage = "Account created successfully! You can now sign in.";
            
            // Clear form
            registerModel = new RegisterModel();
            
            // Redirect to login after delay
            await Task.Delay(2000);
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while creating your account. Please try again.";
            Console.WriteLine($"Registration error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}

<style>
    .register-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }

    .register-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        width: 100%;
        max-width: 600px;
        overflow: hidden;
    }

    .register-header {
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        color: white;
        padding: 2rem;
        text-align: center;
    }

    .logo-section i {
        font-size: 3rem;
        margin-bottom: 1rem;
    }

    .logo-section h2 {
        margin: 0;
        font-weight: 700;
    }

    .register-form {
        padding: 2rem;
        max-height: 70vh;
        overflow-y: auto;
    }

    .form-control:focus, .form-select:focus {
        border-color: #2a5298;
        box-shadow: 0 0 0 0.2rem rgba(42, 82, 152, 0.25);
    }

    .btn-primary {
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        border: none;
        padding: 12px;
        font-weight: 500;
    }

    .btn-primary:hover {
        background: linear-gradient(135deg, #1a3464 0%, #245288 100%);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    .security-notice {
        padding: 1rem 2rem 2rem;
    }

    .alert-info {
        background-color: #e3f2fd;
        border-color: #bbdefb;
        color: #0d47a1;
        font-size: 0.875rem;
    }
</style>