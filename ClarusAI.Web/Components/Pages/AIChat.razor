@page "/ai-chat"
@inject IJSRuntime JSRuntime
@using System.ComponentModel.DataAnnotations

<PageTitle>ClarusAI - Medical AI Assistant</PageTitle>

<div class="ai-chat-container">
    <!-- Header -->
    <div class="chat-header">
        <div class="d-flex align-items-center justify-content-between">
            <div class="d-flex align-items-center">
                <div class="ai-avatar me-3">
                    <i class="bi bi-robot text-white"></i>
                </div>
                <div>
                    <h5 class="mb-0 text-white">ClarusAI Medical Assistant</h5>
                    <small class="text-white-50">HIPAA Compliant • Secure • Real-time Analysis</small>
                </div>
            </div>
            <div class="chat-controls">
                <button class="btn btn-outline-light btn-sm me-2" @onclick="ClearChat">
                    <i class="bi bi-trash me-1"></i>Clear
                </button>
                <button class="btn btn-outline-light btn-sm" @onclick="GoHome">
                    <i class="bi bi-house me-1"></i>Home
                </button>
            </div>
        </div>
    </div>

    <!-- Chat Messages -->
    <div class="chat-messages" id="chatMessages">
        @if (!messages.Any())
        {
            <div class="welcome-message">
                <div class="text-center py-5">
                    <div class="ai-welcome-icon mb-4">
                        <i class="bi bi-robot text-primary" style="font-size: 4rem;"></i>
                    </div>
                    <h3>Welcome to ClarusAI</h3>
                    <p class="text-muted mb-4">Your intelligent medical imaging assistant. Upload medical images or ask questions about patient diagnostics.</p>
                    
                    <div class="row g-3 mb-4">
                        <div class="col-md-4">
                            <div class="suggestion-card" @onclick="@(() => SendSuggestion("Analyze chest X-ray for pneumonia signs"))">
                                <i class="bi bi-lungs text-primary mb-2"></i>
                                <p>Analyze chest X-ray</p>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="suggestion-card" @onclick="@(() => SendSuggestion("Upload CT scan for analysis"))">
                                <i class="bi bi-image text-info mb-2"></i>
                                <p>Upload CT scan</p>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="suggestion-card" @onclick="@(() => SendSuggestion("Explain COVID-19 detection process"))">
                                <i class="bi bi-shield-check text-success mb-2"></i>
                                <p>COVID-19 detection</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        @foreach (var message in messages)
        {
            <div class="message @(message.IsUser ? "user-message" : "ai-message")">
                <div class="message-content">
                    @if (!message.IsUser)
                    {
                        <div class="ai-avatar-small me-2">
                            <i class="bi bi-robot text-white"></i>
                        </div>
                    }
                    <div class="message-text @(message.IsUser ? "user-text" : "ai-text")">
                        @if (message.IsTyping)
                        {
                            <div class="typing-indicator">
                                <span></span>
                                <span></span>
                                <span></span>
                            </div>
                        }
                        else
                        {
                            @((MarkupString)message.Content)
                        }
                        @if (!string.IsNullOrEmpty(message.ImageUrl))
                        {
                            <div class="message-image mt-2">
                                <img src="@message.ImageUrl" alt="Medical Image" class="img-fluid rounded" style="max-width: 300px;" />
                            </div>
                        }
                    </div>
                    @if (message.IsUser)
                    {
                        <div class="user-avatar-small ms-2">
                            <i class="bi bi-person-circle text-primary"></i>
                        </div>
                    }
                </div>
                <div class="message-time text-muted">
                    @message.Timestamp.ToString("HH:mm")
                </div>
            </div>
        }
    </div>

    <!-- File Upload Area -->
    @if (showFileUpload)
    {
        <div class="file-upload-area">
            <div class="upload-container">
                <InputFile OnChange="HandleFileSelected" class="d-none" id="fileInput" accept=".jpg,.jpeg,.png,.dcm,.dicom" />
                <label for="fileInput" class="upload-label">
                    <i class="bi bi-cloud-upload text-primary me-2"></i>
                    Click to upload medical image (DICOM, JPG, PNG)
                </label>
                <button class="btn btn-sm btn-outline-secondary" @onclick="CancelUpload">Cancel</button>
            </div>
        </div>
    }

    <!-- Chat Input -->
    <div class="chat-input">
        <div class="input-container">
            <div class="input-group">
                <button class="btn btn-outline-secondary" type="button" @onclick="ToggleFileUpload">
                    <i class="bi bi-paperclip"></i>
                </button>
                <input type="text" class="form-control" placeholder="Ask about medical imaging, upload files, or request analysis..." 
                       @bind="currentMessage" @onkeypress="HandleKeyPress" @ref="messageInput" />
                <button class="btn btn-primary" type="button" @onclick="SendMessage" disabled="@(isProcessing || string.IsNullOrWhiteSpace(currentMessage))">
                    @if (isProcessing)
                    {
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                    else
                    {
                        <i class="bi bi-send"></i>
                    }
                </button>
            </div>
        </div>
        <div class="input-footer">
            <small class="text-muted">
                <i class="bi bi-shield-check me-1"></i>
                HIPAA Compliant • All data encrypted • No PHI stored
            </small>
        </div>
    </div>
</div>

@code {
    private List<ChatMessage> messages = new();
    private string currentMessage = "";
    private bool isProcessing = false;
    private bool showFileUpload = false;
    private ElementReference messageInput;

    public class ChatMessage
    {
        public string Content { get; set; } = "";
        public bool IsUser { get; set; }
        public DateTime Timestamp { get; set; } = DateTime.Now;
        public string? ImageUrl { get; set; }
        public bool IsTyping { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await messageInput.FocusAsync();
        }
        
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "chatMessages");
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage) || isProcessing)
            return;

        var userMessage = new ChatMessage
        {
            Content = currentMessage,
            IsUser = true,
            Timestamp = DateTime.Now
        };

        messages.Add(userMessage);
        var messageToProcess = currentMessage;
        currentMessage = "";
        isProcessing = true;

        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "chatMessages");

        // Add typing indicator
        var typingMessage = new ChatMessage
        {
            Content = "",
            IsUser = false,
            Timestamp = DateTime.Now,
            IsTyping = true
        };
        messages.Add(typingMessage);
        StateHasChanged();

        // Simulate AI processing
        await Task.Delay(2000);

        messages.Remove(typingMessage);
        var aiResponse = await GenerateAIResponse(messageToProcess);
        messages.Add(aiResponse);

        isProcessing = false;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "chatMessages");
        await messageInput.FocusAsync();
    }

    private async Task SendSuggestion(string suggestion)
    {
        currentMessage = suggestion;
        await SendMessage();
    }

    private async Task<ChatMessage> GenerateAIResponse(string userMessage)
    {
        // This would integrate with your actual AI service
        var responses = new Dictionary<string, string>
        {
            ["chest"] = @"<strong>Chest X-Ray Analysis Protocol:</strong><br/><br/>
                         1. <strong>Image Quality Assessment</strong> - Verifying proper positioning and exposure<br/>
                         2. <strong>Lung Field Evaluation</strong> - Checking for consolidations, infiltrates, or masses<br/>
                         3. <strong>Heart & Mediastinum</strong> - Assessing cardiac silhouette and mediastinal structures<br/>
                         4. <strong>Bone & Soft Tissue</strong> - Examining ribs, spine, and soft tissues<br/><br/>
                         <div class='alert alert-info'>
                         <i class='bi bi-info-circle me-2'></i>
                         To analyze your specific chest X-ray, please upload the image using the attachment button.
                         </div>",
            
            ["upload"] = @"<strong>Medical Image Upload Guidelines:</strong><br/><br/>
                          <strong>Supported Formats:</strong><br/>
                          • DICOM (.dcm, .dicom) - Preferred format<br/>
                          • JPEG (.jpg, .jpeg) - High resolution recommended<br/>
                          • PNG (.png) - Lossless compression<br/><br/>
                          <strong>Quality Requirements:</strong><br/>
                          • Minimum resolution: 512x512 pixels<br/>
                          • Maximum file size: 100MB<br/>
                          • Proper patient positioning<br/>
                          • Adequate contrast and brightness<br/><br/>
                          <div class='alert alert-warning'>
                          <i class='bi bi-shield-exclamation me-2'></i>
                          All uploaded images are automatically encrypted and comply with HIPAA regulations.
                          </div>",
            
            ["covid"] = @"<strong>COVID-19 Detection in Chest Imaging:</strong><br/><br/>
                         <strong>Key Radiological Signs:</strong><br/>
                         • Ground-glass opacities (GGO)<br/>
                         • Bilateral peripheral consolidations<br/>
                         • Crazy-paving pattern<br/>
                         • Reversed halo sign<br/><br/>
                         <strong>AI Detection Process:</strong><br/>
                         1. <strong>Preprocessing</strong> - Image normalization and enhancement<br/>
                         2. <strong>Feature Extraction</strong> - CNN-based pattern recognition<br/>
                         3. <strong>Classification</strong> - Multi-class probability scoring<br/>
                         4. <strong>Validation</strong> - Cross-reference with clinical data<br/><br/>
                         <div class='alert alert-success'>
                         <i class='bi bi-check-circle me-2'></i>
                         Our AI model achieves 94.7% accuracy in COVID-19 detection from chest X-rays.
                         </div>"
        };

        var response = userMessage.ToLower() switch
        {
            var msg when msg.Contains("chest") || msg.Contains("x-ray") || msg.Contains("xray") => responses["chest"],
            var msg when msg.Contains("upload") || msg.Contains("ct") || msg.Contains("scan") => responses["upload"],
            var msg when msg.Contains("covid") || msg.Contains("coronavirus") => responses["covid"],
            _ => @"<strong>ClarusAI Medical Assistant</strong><br/><br/>
                  I'm here to help with medical imaging analysis and diagnostics. I can assist with:<br/><br/>
                  • <strong>Image Analysis</strong> - Chest X-rays, CT scans, MRIs<br/>
                  • <strong>Disease Detection</strong> - Pneumonia, COVID-19, fractures<br/>
                  • <strong>Clinical Insights</strong> - Diagnostic recommendations<br/>
                  • <strong>DICOM Processing</strong> - Medical image format support<br/><br/>
                  Please specify what type of medical imaging assistance you need, or upload an image for analysis."
        };

        return new ChatMessage
        {
            Content = response,
            IsUser = false,
            Timestamp = DateTime.Now
        };
    }

    private void ToggleFileUpload()
    {
        showFileUpload = !showFileUpload;
        StateHasChanged();
    }

    private void CancelUpload()
    {
        showFileUpload = false;
        StateHasChanged();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            // Simulate file upload and analysis
            showFileUpload = false;
            isProcessing = true;
            StateHasChanged();

            var userMessage = new ChatMessage
            {
                Content = $"Uploaded medical image: {file.Name}",
                IsUser = true,
                Timestamp = DateTime.Now,
                ImageUrl = "/images/sample-xray.jpg" // Placeholder for demo
            };

            messages.Add(userMessage);
            StateHasChanged();

            // Simulate processing time
            await Task.Delay(3000);

            var analysisResult = new ChatMessage
            {
                Content = @"<strong>Image Analysis Complete</strong><br/><br/>
                           <strong>Findings:</strong><br/>
                           • Normal lung fields bilaterally<br/>
                           • No acute cardiopulmonary findings<br/>
                           • Heart size within normal limits<br/>
                           • No pleural effusion or pneumothorax<br/><br/>
                           <strong>Confidence Scores:</strong><br/>
                           <div class='progress mb-2'>
                             <div class='progress-bar bg-success' style='width: 98%'>Normal: 98.2%</div>
                           </div>
                           <div class='progress mb-2'>
                             <div class='progress-bar bg-warning' style='width: 1.5%'>Pneumonia: 1.5%</div>
                           </div>
                           <div class='progress mb-2'>
                             <div class='progress-bar bg-danger' style='width: 0.3%'>COVID-19: 0.3%</div>
                           </div>
                           <br/>
                           <div class='alert alert-success'>
                           <i class='bi bi-check-circle me-2'></i>
                           <strong>Recommendation:</strong> No further imaging required. Normal chest X-ray.
                           </div>",
                IsUser = false,
                Timestamp = DateTime.Now
            };

            messages.Add(analysisResult);
            isProcessing = false;
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "chatMessages");
        }
    }

    private void ClearChat()
    {
        messages.Clear();
        StateHasChanged();
    }

    private void GoHome()
    {
        // Navigate to home page
        JSRuntime.InvokeVoidAsync("window.location.href", "/");
    }
}

<style>
    .ai-chat-container {
        height: 100vh;
        display: flex;
        flex-direction: column;
        background: #f8f9fa;
    }

    .chat-header {
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        padding: 1rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .ai-avatar {
        width: 50px;
        height: 50px;
        background: rgba(255,255,255,0.2);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        background: #f8f9fa;
    }

    .message {
        margin-bottom: 1.5rem;
    }

    .message-content {
        display: flex;
        align-items: flex-end;
    }

    .user-message {
        text-align: right;
    }

    .user-message .message-content {
        justify-content: flex-end;
    }

    .ai-message .message-content {
        justify-content: flex-start;
    }

    .message-text {
        max-width: 80%;
        padding: 1rem;
        border-radius: 18px;
        word-wrap: break-word;
    }

    .user-text {
        background: #007bff;
        color: white;
        border-bottom-right-radius: 4px;
    }

    .ai-text {
        background: white;
        color: #333;
        border: 1px solid #e9ecef;
        border-bottom-left-radius: 4px;
    }

    .ai-avatar-small, .user-avatar-small {
        width: 32px;
        height: 32px;
        background: #007bff;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1rem;
        flex-shrink: 0;
    }

    .user-avatar-small {
        background: transparent;
        font-size: 1.5rem;
    }

    .message-time {
        font-size: 0.75rem;
        margin-top: 0.25rem;
    }

    .user-message .message-time {
        text-align: right;
    }

    .suggestion-card {
        background: white;
        border: 2px solid #e9ecef;
        border-radius: 12px;
        padding: 1.5rem;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
        height: 100%;
    }

    .suggestion-card:hover {
        border-color: #007bff;
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0,123,255,0.2);
    }

    .suggestion-card i {
        font-size: 2rem;
        display: block;
    }

    .suggestion-card p {
        margin: 0;
        font-weight: 500;
        color: #333;
    }

    .file-upload-area {
        background: #e3f2fd;
        border-top: 1px solid #bbdefb;
        padding: 1rem;
    }

    .upload-container {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .upload-label {
        flex: 1;
        background: white;
        border: 2px dashed #2196f3;
        border-radius: 8px;
        padding: 1rem;
        text-align: center;
        cursor: pointer;
        margin: 0;
        transition: all 0.3s ease;
    }

    .upload-label:hover {
        background: #f5f5f5;
        border-color: #1976d2;
    }

    .chat-input {
        background: white;
        border-top: 1px solid #e9ecef;
        padding: 1rem;
    }

    .input-container {
        max-width: 1000px;
        margin: 0 auto;
    }

    .input-footer {
        text-align: center;
        margin-top: 0.5rem;
    }

    .typing-indicator {
        display: flex;
        gap: 4px;
        padding: 1rem 0;
    }

    .typing-indicator span {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #6c757d;
        animation: typing 1.4s infinite ease-in-out;
    }

    .typing-indicator span:nth-child(1) { animation-delay: -0.32s; }
    .typing-indicator span:nth-child(2) { animation-delay: -0.16s; }
    .typing-indicator span { animation: typing 1.4s infinite ease-in-out; }

    .progress {
        height: 20px;
        font-size: 0.875rem;
    }

    .progress-bar {
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 500;
    }
</style>

<script>
    window.scrollToBottom = (elementId) => {
        const element = document.getElementById(elementId);
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };
</script>